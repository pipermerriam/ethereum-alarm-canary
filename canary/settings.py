"""
Django settings for canary project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import excavator
import dj_database_url
import django_cache_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = excavator.env_string('DJANGO_SECRET_KEY', required=True)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = excavator.env_bool('DJANGO_DEBUG', default=True)

ALLOWED_HOSTS = excavator.env_list('DJANGO_ALLOWED_HOSTS', required=not DEBUG)


# Application definition

INSTALLED_APPS = [
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'pipeline',
    'canary',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'canary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.i18n",
                "django.template.context_processors.tz",
            ],
        },
    },
]


WSGI_APPLICATION = 'canary.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.parse(excavator.env_string('DATABASE_URL', required=True)),
}
DATABASES['default'].setdefault('ATOMIC_REQUESTS', True)

# Cache
CACHES = {
    'default': django_cache_url.config(),
}


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = excavator.env_string('DJANGO_STATIC_URL', default='/static/')
STATIC_ROOT = excavator.env_string(
    'DJANGO_STATIC_ROOT',
    default=os.path.join(BASE_DIR, 'canary', 'public', 'static'),
)

MEDIA_URL = excavator.env_string('DJANGO_MEDIA_URL', default='/media/')
MEDIA_ROOT = excavator.env_string(
    'DJANGO_MEDIA_ROOT',
    default=os.path.join(BASE_DIR, 'canary', 'public', 'media'),
)

DEFAULT_FILE_STORAGE = excavator.env_string(
    "DJANGO_DEFAULT_FILE_STORAGE",
    default="django.core.files.storage.FileSystemStorage",
)
STATICFILES_STORAGE = excavator.env_string(
    "DJANGO_STATICFILES_STORAGE",
    default="django.contrib.staticfiles.storage.StaticFilesStorage"
)

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'canary', 'static'),
    os.path.join(BASE_DIR, 'bower_components'),
)

# Static file finders.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'pipeline.finders.PipelineFinder',
)

# Herokuify
if 'SECURE_PROXY_SSL_HEADER' in os.environ:
    SECURE_PROXY_SSL_HEADER = excavator.env_list('SECURE_PROXY_SSL_HEADER', default=None)

# AWS
AWS_ACCESS_KEY_ID = excavator.env_string('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = excavator.env_string('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = excavator.env_string('AWS_STORAGE_BUCKET_NAME')

AWS_REDUCED_REDUNDANCY = True
AWS_QUERYSTRING_AUTH = False
AWS_S3_FILE_OVERWRITE = True
AWS_S3_SECURE_URLS = True
AWS_IS_GZIPPED = False
AWS_PRELOAD_METADATA = True
AWS_HEADERS = {
    "Cache-Control": "public, max-age=86400",
}

DEFAULT_S3_PATH = "media"
STATIC_S3_PATH = "static"

# Django Pipeline Settings
PIPELINE = {
    'STYLESHEETS': {
        'project': {
            'source_filenames': (
                "css/project.css",
            ),
            'output_filename': 'css/app.css',
        },
        'dependencies': {
            'source_filenames': (
                "tether/dist/css/tether.css",
                "bootstrap/dist/css/bootstrap.css",
            ),
            'output_filename': 'css/dependencies.css',
        },
    },
    'JAVASCRIPT': {
        'config': {
            'source_filenames': (
                "js/config/canary.js",
                "js/config/flux.js",
            ),
            'output_filename': 'js/config.js',
        },
        'actions': {
            'source_filenames': (
                "js/actions/*.js",
            ),
            'output_filename': 'js/actions.js',
        },
        'stores': {
            'source_filenames': (
                "js/stores/*.js",
            ),
            'output_filename': 'js/stores.js',
        },
        'components': {
            'source_filenames': (
                "js/components/*.jsx",
            ),
            'output_filename': 'js/components.js',
        },
        'project': {
            'source_filenames': (
                "js/project.js",
            ),
            'output_filename': 'js/app.js',
        },
        'dependencies': {
            'source_filenames': (
                "jquery/dist/jquery.js",
                "tether/dist/js/tether.js",
                "bootstrap/dist/js/bootstrap.js",
                "react/react.js",
                "react/react-dom.js",
                "immutable/dist/immutable.js",
                "flux/dist/Flux.js",
                "fluxxor/build/fluxxor.js",
                "lodash/lodash.js",
            ),
            'output_filename': 'js/dependencies.js',
        },
    },
    'CSS_COMPRESSOR': 'pipeline.compressors.NoopCompressor',
    'JS_COMPRESSOR': 'pipeline.compressors.NoopCompressor',
    'PIPELINE_ENABLED': excavator.env_bool('DJANGO_PIPELINE_ENABLED', not DEBUG),
    'DISABLE_WRAPPER': True,
    'COMPILERS': (
        'react.utils.pipeline.JSXCompiler',
    ),
}

# Blockchain Client
BLOCKCHAIN_CLIENT_URL = excavator.env_string(
    'BLOCKCHAIN_CLIENT_URL',
    default="rpc://127.0.0.1:8545",
)

# Canary Contract Addresses
CANARY_CONTRACT_ADDRESSES = excavator.env_list(
    'CANARY_CONTRACT_ADDRESSES',
    default='0x675e2c143295b8683b5aed421329c4df85f91b33'
)

# Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': tuple(),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}
